<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddAccessRuleAdding" xml:space="preserve">
    <value>Adding access rights {0} to NT Account {1} on {2}...</value>
  </data>
  <data name="ASPNetPreCompiling" xml:space="preserve">
    <value>Pre-compiling asp.net on {0} to {1}...</value>
  </data>
  <data name="ATAddJobAdding" xml:space="preserve">
    <value>Adding job "{0}"...</value>
  </data>
  <data name="ATAddJobAddingTrigger" xml:space="preserve">
    <value>Adding trigger {0}...</value>
  </data>
  <data name="ATDelJobDeleting" xml:space="preserve">
    <value>Deleting job "{0}"...</value>
  </data>
  <data name="ATDelJobNotFound" xml:space="preserve">
    <value>Job "{0}" not found.</value>
  </data>
  <data name="BaseAccessRuleDirNotFound" xml:space="preserve">
    <value>Directory {0} not found.</value>
  </data>
  <data name="BaseAccessRuleFileNotFound" xml:space="preserve">
    <value>File {0} not found.</value>
  </data>
  <data name="BaseCOMTaskApplyProperty" xml:space="preserve">
    <value>Setting property {0} = {1}</value>
  </data>
  <data name="BaseCOMTaskFormatPossibleValues" xml:space="preserve">
    <value>{0} is not a valid value for {1}. Possible values are :</value>
  </data>
  <data name="BuildComponentExecuteTarget" xml:space="preserve">
    <value>Excuting target {0}...</value>
  </data>
  <data name="BuildComponentFileNotFound" xml:space="preserve">
    <value>Component file not found : {0}.</value>
  </data>
  <data name="BuildComponentMissingVB6Artifact" xml:space="preserve">
    <value>Missing VB6 dll {0}.</value>
  </data>
  <data name="BuildComponentNotSupported" xml:space="preserve">
    <value>The component {0} is not supported by the build-components task.</value>
  </data>
  <data name="CheckVB6DependenciesCheck" xml:space="preserve">
    <value>Checking dependencies for project {0}...</value>
  </data>
  <data name="CheckVB6DependenciesGuidNotMatch" xml:space="preserve">
    <value>Error with reference {0} ({1}) : the guid doesn't match - expected {2} != actual {3}.</value>
  </data>
  <data name="CheckVB6DependenciesPathRooted" xml:space="preserve">
    <value>Error with reference {0} ({1}) : the path {2} is not relative.</value>
  </data>
  <data name="CheckVB6DependenciesReferenceMissing" xml:space="preserve">
    <value>Error with reference {0} ({1}) : the file {2} doesn't exist.</value>
  </data>
  <data name="CheckVB6DependenciesReferenceNotInProjectFolder" xml:space="preserve">
    <value>Error with reference {0} ({1}) : the file {2} is not in the project folder.</value>
  </data>
  <data name="CheckVB6DependenciesSkippingDirectory" xml:space="preserve">
    <value>Skipping path rooted check for {0}.</value>
  </data>
  <data name="CheckVB6DependenciesWrongVersion" xml:space="preserve">
    <value>Error with reference {0} ({1}) : the version doesn't match - expected {2} != actual {3}.</value>
  </data>
  <data name="COMCreateApplicationAddComponent" xml:space="preserve">
    <value>Adding component {0} to application {1}...</value>
  </data>
  <data name="COMCreateApplicationAddRole" xml:space="preserve">
    <value>Adding role {0} to {1}...</value>
  </data>
  <data name="COMCreateApplicationCreating" xml:space="preserve">
    <value>Creating COM+ application "{0}"...</value>
  </data>
  <data name="COMCreateApplicationDeleting" xml:space="preserve">
    <value>Deleting old COM+ application "{0}"...</value>
  </data>
  <data name="COMCreateApplicationWarningComponentNotFound" xml:space="preserve">
    <value>Warning : COM+ component {0} not be found in {1}. Property {2}={3} will not be applied.</value>
  </data>
  <data name="COMDeleteApplicationDeleting" xml:space="preserve">
    <value>Deleting COM+ application "{0}"...</value>
  </data>
  <data name="COMDeleteApplicationNotFound" xml:space="preserve">
    <value>COM+ application "{0}" not found.</value>
  </data>
  <data name="ComRegister" xml:space="preserve">
    <value>Registering "{0}"...</value>
  </data>
  <data name="COMStartApplicationNotFound" xml:space="preserve">
    <value>COM+ application "{0}" not found.</value>
  </data>
  <data name="COMStartApplicationStarting" xml:space="preserve">
    <value>Starting COM+ application {0}...</value>
  </data>
  <data name="COMStopApplicationNotFound" xml:space="preserve">
    <value>COM+ application "{0}" not found.</value>
  </data>
  <data name="COMStopApplicationStopping" xml:space="preserve">
    <value>Stopping COM+ application {0}...</value>
  </data>
  <data name="ComUnregister" xml:space="preserve">
    <value>Unregistering "{0}"...</value>
  </data>
  <data name="CreatePackageCopyEnvDirectory" xml:space="preserve">
    <value>Copying Environment directory...</value>
  </data>
  <data name="EnvIncludeMissingEnvDir" xml:space="preserve">
    <value>Missing {0} folder.</value>
  </data>
  <data name="EnvIncludeNoInclude" xml:space="preserve">
    <value>No files where included.</value>
  </data>
  <data name="GacInstallInstalling" xml:space="preserve">
    <value>Installing assembly {0} into the GAC...</value>
  </data>
  <data name="GacUninstallRemove" xml:space="preserve">
    <value>Removing assembly {0} from the GAC...</value>
  </data>
  <data name="GenerateInteropErrorExecutingSn" xml:space="preserve">
    <value>Error executing sn.exe</value>
  </data>
  <data name="GenerateInteropErrorExecutingTlbimp" xml:space="preserve">
    <value>Error executing TlbImp.exe</value>
  </data>
  <data name="GenerateInteropUpToDate" xml:space="preserve">
    <value>File {0} seems up to date with {1} - doing nothing.</value>
  </data>
  <data name="IISAppPoolAlreadyExists" xml:space="preserve">
    <value>AppPool "{0}" already exists.</value>
  </data>
  <data name="IISCreateVDirCreate" xml:space="preserve">
    <value>Creating VDir {0}/{1}...</value>
  </data>
  <data name="IISCreateWebSiteCreate" xml:space="preserve">
    <value>Creating Website {0} with ID {1}...</value>
  </data>
  <data name="IISCreateWebSiteCreateAppPool" xml:space="preserve">
    <value>Creating AppPool {0}...</value>
  </data>
  <data name="IISCreateWebSiteCreateVDir" xml:space="preserve">
    <value>Creating VDir {0}...</value>
  </data>
  <data name="IISCreateWebSiteCreateWebFile" xml:space="preserve">
    <value>Creating web file {0}...</value>
  </data>
  <data name="IISDeleteVDirDelete" xml:space="preserve">
    <value>Deleting VDir {0}/{1}...</value>
  </data>
  <data name="IISDeleteWebSiteDeleting" xml:space="preserve">
    <value>Deleting website {0}...</value>
  </data>
  <data name="IISDeleteWebSiteDeletingAppPool" xml:space="preserve">
    <value>Deleting apppool {0}...</value>
  </data>
  <data name="IISWebSiteNotFound" xml:space="preserve">
    <value>Website {0} not found.</value>
  </data>
  <data name="IISWebSiteRootNotFound" xml:space="preserve">
    <value>Website ROOT {0} not found.</value>
  </data>
  <data name="KillProcessError" xml:space="preserve">
    <value>Error trying to kill process {0} : {1}.</value>
  </data>
  <data name="KillProcessFoundProcess" xml:space="preserve">
    <value>Found process {0} blocking dll {1} - killing...</value>
  </data>
  <data name="KillProcessKill" xml:space="preserve">
    <value>Killing process {0}...</value>
  </data>
  <data name="KillProcessSearching" xml:space="preserve">
    <value>Looking for processes blocking {0}...</value>
  </data>
  <data name="ListLoopListNotFound" xml:space="preserve">
    <value>List {0} not found.</value>
  </data>
  <data name="MissingDirectory" xml:space="preserve">
    <value>Directory {0} doesn't exists.</value>
  </data>
  <data name="MissingFile" xml:space="preserve">
    <value>The file {0} doesn't exists.</value>
  </data>
  <data name="MsiExecAction" xml:space="preserve">
    <value>Executing action {0} on msi {1}...</value>
  </data>
  <data name="RemoveAccessRuleEmpty" xml:space="preserve">
    <value>No access rule found matching {0} on {1}.</value>
  </data>
  <data name="RemoveAccessRuleRemoving" xml:space="preserve">
    <value>Removing access rule for {0} on {1}...</value>
  </data>
  <data name="ReplaceComDllSourceError" xml:space="preserve">
    <value>Error : source dll {0} not found.</value>
  </data>
  <data name="SVNAdding" xml:space="preserve">
    <value>Adding unversioned sources file from {0} to SVN.</value>
  </data>
  <data name="SVNCheckedOut" xml:space="preserve">
    <value>{0} checked out at {1}.</value>
  </data>
  <data name="SVNCheckingOut" xml:space="preserve">
    <value>Checking out {0} to {1}...</value>
  </data>
  <data name="SVNCheckoutEmptyDirectory" xml:space="preserve">
    <value>Directory '{0}' is not empty.</value>
  </data>
  <data name="SVNCommitCommitting" xml:space="preserve">
    <value>Committing {0} for "{1}"...</value>
  </data>
  <data name="SVNCommitResult" xml:space="preserve">
    <value>{0} committed at revision {1} by {2}.</value>
  </data>
  <data name="SVNConflict" xml:space="preserve">
    <value>There are conflicts in the directory {0}.</value>
  </data>
  <data name="SVNCopyCopying" xml:space="preserve">
    <value>Copying {0} to {1}...</value>
  </data>
  <data name="SVNCopyResult" xml:space="preserve">
    <value>{0} copied to {1} at revision {2} by {3}.</value>
  </data>
  <data name="SVNDelete" xml:space="preserve">
    <value>Deleting {0}</value>
  </data>
  <data name="SVNFunctionsBadBaseUriForTags" xml:space="preserve">
    <value>Impossible to evaluate tags uri for uri {0}.</value>
  </data>
  <data name="SVNSourcesFolderNotFound" xml:space="preserve">
    <value>Sources folder ({0}) not found. Ignore adding unversioned sources file to SVN.</value>
  </data>
  <data name="SVNUpdateResult" xml:space="preserve">
    <value>{0} updated at revision {1}.</value>
  </data>
  <data name="SVNUpdateUpdating" xml:space="preserve">
    <value>Updating {0}...</value>
  </data>
  <data name="VB6UpdateVersionMissingVersion" xml:space="preserve">
    <value>Missing version information. You must either define a property named {0}, used the &lt;version /&gt; task or set the version property.</value>
  </data>
  <data name="VB6UpdateVersionUpdating" xml:space="preserve">
    <value>Updating project "{0}" to version {1}...</value>
  </data>
  <data name="VersionSet" xml:space="preserve">
    <value>{0} = {1}</value>
  </data>
</root>